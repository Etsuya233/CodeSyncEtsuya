package com.etsuya.leetcode;

import org.junit.Test;

import java.util.Arrays;

/**
 * ClassName: P16
 * Package: com.etsuya.leetcode
 * Description:
 *
 * @Author: Etsuya
 * @Create: 2023/3/25 16:36
 * @Version: 1.0
 */
public class P16 {
	@Test
	public void test(){
		int[] nums = new int[]{777,286,-518,749,965,-15,497,566,683,-231,381,-9,930,510,-161,-431,307,-288,-643,-198,556,-576,757,-777,-994,-953,-908,-890,-92,561,-333,905,-881,-387,-247,-326,-654,-116,213,577,66,236,-179,373,698,-230,602,337,-669,798,-771,-395,717,459,174,-457,-452,414,-526,253,-782,962,-279,-13,693,886,422,146,-906,932,-818,-710,30,-405,-347,-964,621,678,-1,835,68,-623,-37,309,136,-496,-909,593,481,-786,825,-660,423,370,-376,694,88,79,896,503,-358,-289,143,780,-225,440,-989,544,622,775,-810,229,574,-218,961,-736,-806,-950,-907,-143,-998,-3,-944,-409,813,-493,-715,-205,807,-569,-521,-800,729,-523,-160,119,372,-857,121,255,-886,-41,-27,827,-95,127,767,-653,771,-480,-776,446,-276,506,-889,458,-80,953,746,797,-735,625,-933,-488,726,513,571,124,955,-769,-897,94,171,-157,525,913,-713,70,-823,711,679,380,281,-839,901,-359,319,-281,-194,514,671,-261,861,974,-490,467,328,-427,368,-228,764,2,182,-234,-841,677,271,-468,740,433,-371,-236,613,-617,-372,952,-796,543,776,-522,-478,-914,929,-259,-48,-840,-570,-297,-747,-675,103,461,387,34,67,724,118,539,-323,138,-820,290,230,737,730,-716,-700,-987,-88,-535,-960,-305,-365,-838,580,-882,979,-600,487,938,-783,-135,547,183,-665,-291,277,187,-287,212,202,657,-193,700,-726,603,246,651,304,-741,-590,209,-528,233,-828,778,900,-799,639,894,-658,795,-126,-325,-550,-336,270,681,-472,-749,-191,455,-879,421,-122,44,-133,-666,809,-211,633,-602};
	    int target = -7843;
		long a = System.currentTimeMillis();
		System.out.println(threeSumClosest(nums, target));
		long b = System.currentTimeMillis();
		System.out.println(b - a);
	}

	public int threeSumClosest(int[] nums, int target) {
		int len = nums.length;
		int nearest = 100000000;
		Arrays.sort(nums);
		for(int i = 0; i < len - 2; i++){
			if(i > 0 && nums[i] == nums[i - 1]){
				continue;
			}
			int l = i + 1, r = len - 1;
			while(l < r){
				int threesum = nums[l] + nums[r] + nums[i];
				if(Math.abs(threesum - target) < Math.abs(nearest - target)) nearest = threesum;
				if(threesum > target){
					r--;
				} else if (threesum < target) {
					l++;
				} else {
					return target;
				}
			}
		}
		return nearest;
	}
}
